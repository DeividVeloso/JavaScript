{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","console","log","onerror","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;AAED;;;;;iCACSC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAmB;AAClC,oBAAIC,UAAU,MAAKN,WAAL,CACGO,WADH,CACe,CAAC,aAAD,CADf,EAC+B,WAD/B,EAEGC,WAFH,CAEe,aAFf,EAGGC,GAHH,CAGOP,UAHP,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAK;AACrBC,4BAAQC,GAAR,CAAe,MAAKX,MAApB;AACAG,8BAFqB,CAEV;AACd,iBAHD;;AAKAE,wBAAQO,OAAR,GAAkB,aAAK;AACnBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,gDAA0B,MAAKJ,MAA/B;AACH,iBAHD;AAIH,aAfM,CAAP;AAiBH;;;qCAEY;AAAA;;AACT,mBAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAEnC,oBAAIY,SAAS,OAAKjB,WAAL,CACAO,WADA,CACY,CAAC,OAAKN,MAAN,CADZ,EAC2B,WAD3B,EACwC;AADxC,iBAEAO,WAFA,CAEY,OAAKP,MAFjB,EAEyB;AAFzB,iBAGAiB,UAHA,EAAb,CAFmC,CAKT;;AAE1B,oBAAIC,cAAc,EAAlB;;AAEA;AACAF,uBAAOP,SAAP,GAAmB,aAAK;;AAEpB;AACA,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA;AACA,wBAAGD,KAAH,EAAS;AACL,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,8BAAMS,QAAN;AACH,qBAJD,MAIK;AACDzB,gCAAQe,WAAR;AACH;AACJ,iBAZD;;AAcAF,uBAAOJ,OAAP,GAAiB,aAAI;AACjBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aA5BM,CAAP;AA6BH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd,CAFoC,CAKtB;;AAEdxB,wBAAQI,SAAR,GAAoB,aAAK;AACrBN,4BAAQ,4BAAR;AACH,iBAFD;AAGAE,wBAAQO,OAAR,GAAkB,aAAK;AACnBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,kCAAP;AACH,iBAHD;AAIH,aAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\r\n    \r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = \"negociacoes\"\r\n    }\r\n\r\n    //Retonando uma promise\r\n    adiciona(negociacao){\r\n        return new Promise((resolve,reject) =>{\r\n            let request = this._connection\r\n                            .transaction(['negociacoes'],'readwrite')\r\n                            .objectStore(\"negociacoes\")\r\n                            .add(negociacao);\r\n            \r\n            request.onsuccess = e => {\r\n                console.log(`${this._store} Inserido com sucesso`);\r\n                resolve(); // Retornando a Promise resolvida sem dados\r\n            }\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(`Erro ao inserir ${this._store}`);\r\n            }\r\n        })\r\n       \r\n    }\r\n\r\n    listaTodos() {\r\n        return new Promise((resolve,reject) => {\r\n            \r\n            let cursor = this._connection\r\n                        .transaction([this._store], 'readwrite') //Pega a conexão com o IndexDB e pede permissão de escrita e leitura nessa tabela\r\n                        .objectStore(this._store) //Pega tabela(StoreObject) negociacoes\r\n                        .openCursor();//Abre o cursor na store \r\n\r\n            let negociacoes = [];\r\n\r\n            //percorre o cursor como se fosse um While\r\n            cursor.onsuccess = e => {\r\n                \r\n                //Guarda a linha atual da tabela\r\n                let atual = e.target.result;\r\n                //Se ainda tiver dados para serem lidos adiciona no array negociacoes\r\n                if(atual){\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    atual.continue();\r\n                }else{\r\n                    resolve(negociacoes);\r\n                }\r\n            }\r\n\r\n            cursor.onerror = e =>{\r\n                console.log(e.target.error);\r\n                reject('Não foi possível listar as negociações');\r\n            }\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            //Me devolve uma requisição\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear(); //Apaga a minha obejectStore\r\n            \r\n            request.onsuccess = e => {\r\n                resolve('Dados apagados com sucesso');\r\n            }\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível apagar os dados')\r\n            }\r\n        });\r\n    }\r\n    \r\n}"]}