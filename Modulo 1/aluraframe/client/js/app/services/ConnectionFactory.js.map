{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","dbVersion","stores","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createObjectStore","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AACA,IAAIA,oBAAqB,YAAW;AAChC,MAAIC,SAAS,YAAb;AACA,MAAIC,YAAY,CAAhB;AACA,MAAIC,SAAS,CAAC,aAAD,CAAb;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;AACA;AACE;AACA,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AAAA;;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BC,SAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjC,kBAAKC,kBAAL,CAAwBC,EAAEC,MAAF,CAASC,MAAjC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAG,CAACf,UAAJ,EAAgB;AACdA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAU;AACzB,sBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,eAFD;AAGD;AACCE,oBAAQJ,UAAR;AACH,WATD;;AAWAM,sBAAYW,OAAZ,GAAsB,aAAK;AACvBZ,mBAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,WAFD;AAGD,SAtBM,CAAP;AAuBD;AA9BH;AAAA;AAAA,yCAgC4BnB,UAhC5B,EAgCwC;AACpC;AACA;AACAD,eAAOqB,OAAP,CAAe,iBAAS;AACtB,cAAIpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC/CvB,uBAAWwB,iBAAX,CAA6BD,KAA7B;AACD,WAFD,MAEO;AACLvB,uBAAWyB,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD;AACF,SAND;AAOD;;AAED;;AA5CF;AAAA;AAAA,wCA6C0B;AACtB,YAAG1B,UAAH,EAAc;AACZC;AACAD,uBAAa,IAAb;AACD;AACF;AAlDH;;AAAA;AAAA;AAoDH,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\r\nvar ConnectionFactory = (function (){\r\n    var dbName = \"aluraframe\";\r\n    var dbVersion = 1;\r\n    var stores = [\"negociacoes\"];\r\n    \r\n    var connection = null;\r\n    var close = null;\r\n    return class ConnectionFactory {\r\n      //para evitar que o programador tente instanciar esssa classe, pois ela é static\r\n      constructor() {\r\n        throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\r\n      }\r\n\r\n      static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n          //Cria o banco de dados\r\n          let openRequest = window.indexedDB.open(dbName, dbVersion);\r\n\r\n          openRequest.onupgradeneeded = e => {\r\n            this._createObjectStore(e.target.result);\r\n          };\r\n\r\n          openRequest.onsuccess = e => {\r\n            if(!connection) {\r\n              connection = e.target.result;\r\n              close = connection.close.bind(connection);\r\n              connection.close = function(){\r\n                  throw new Error('Você não pode fechar diretamente a conexão')\r\n              }\r\n            }\r\n              resolve(connection)\r\n          };\r\n\r\n          openRequest.onerror = e => {\r\n              reject(e.target.error.name)\r\n          };\r\n        });\r\n      }\r\n\r\n      static _createObjectStore(connection) {\r\n        //Verifica se já existe as stores que estou passando no array STORES para criar no banco\r\n        //Caso exista então apagar as existentes, senão criar as novas stores\r\n        stores.forEach(store => {\r\n          if (connection.objectStoreNames.contains(store)) {\r\n            connection.deleteObjectStore(store);\r\n          } else {\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n          }\r\n        });\r\n      }\r\n\r\n      //Método para fechar a conexão\r\n      static closeConnection(){\r\n        if(connection){\r\n          close();\r\n          connection = null;\r\n        }\r\n      }\r\n    }\r\n})()\r\n"]}